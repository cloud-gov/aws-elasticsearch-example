#!/usr/bin/env python3

import argparse
import sys
from cfenv import AppEnv
from elasticsearch import Elasticsearch, RequestsHttpConnection
from requests_aws4auth import AWS4Auth

SERVICE = "es"
REGION = "us-gov-west-1"


# Setup cli
parser = argparse.ArgumentParser(description="Migrating your Elasticsearch service.",)


subparsers = parser.add_subparsers(
    dest="command", help="Run <command> help for more information."
)

## Elasticsearch migrate command
parser_migrate = subparsers.add_parser(
    "migrate", help="Delete elasticsearch services index with sample document."
)


parser_migrate.add_argument(
    "-s",
    "--src",
    dest="src_service",
    type=str,
    help="The name of the source elasticsearch service",
    required=True,
)

parser_migrate.add_argument(
    "-d",
    "--dest",
    dest="dest_service",
    type=str,
    help="The name of the destination elasticsearch service",
    required=True,
)

parser_migrate.add_argument(
    "-b",
    "--bucket",
    dest="s3_bucket_service",
    type=str,
    help="The name of the S3 bucket service",
    required=True,
)

# Small example document to load
sample_data_options = {
    "index": "movies",
    "doc_type": "doc",
    "id": "1",
    "body": {"title": "Moneyball", "director": "Bennett Miller", "year": "2011"},
}


def get_service_creds(service_name):
    """
    Get elasticsearch credentials via the service name.
    """
    env = AppEnv()
    service = env.get_service(name=service_name)
    return service.credentials


def create_client(service_name):
    """
    Creates an elasticsearch client from the service name of
    the legacy Elasticsearch service or the new AWS Elasticsearch
    service based on the credentials supplied to the service.
    """

    try:
        credentials = get_service_creds(service_name)

        ## If the username and password is supplied in the service credentials
        ## Create an Elasticsearch client for the old, kubernetes-broker service
        if "username" in credentials and "password" in credentials:
            uri = credentials["uri"]
            client = Elasticsearch(hosts=[uri], use_ssl=False, verify_certs=False)

            return {"client": client, "broker": "kubernetes-broker"}

        ## Else, if create an Elasticsearch client for the new, aws-broker service
        else:
            host = credentials["host"]
            port = credentials["port"]
            access_key = credentials["access_key"]
            secret_key = credentials["secret_key"]

            aws_auth = AWS4Auth(access_key, secret_key, REGION, SERVICE)

            client = Elasticsearch(
                hosts=[{"host": host, "port": port}],
                http_auth=aws_auth,
                use_ssl=True,
                verify_certs=True,
                connection_class=RequestsHttpConnection,
            )

            return {"client": client, "broker": "aws-broker"}
    except Exception as err:
        print("An error occurred trying to create Elasticsearch client.")
        sys.exit(err)


class ESClient:
    def __init__(self, src_service_name, dest_service_name, bucket_service_name):
        src_client = create_client(src_service_name)
        dest_client = create_client(dest_service_name)

        self.src_client = src_client["client"]
        self.src_service_name = src_service_name
        self.dest_client = dest_client["client"]
        self.dest_service_name = dest_service_name
        self.bucket_credentials = get_service_creds(bucket_service_name)

    def _get_service_client(self, service_name):
        if service_name == self.src_service_name:
            return self.src_client

        elif service_name == self.dest_service_name:
            return self.dest_client

        else:
            sys.exit("Elasticsearch service name not found.")

    def _load_sample_data(self, service_name):
        sample_data_options = {
            "index": index,
            "doc_type": doc_type,
            "id": id,
            "body": document,
        }

        client = self._get_service_client(service_name)
        result = client.index(sample_data_options)
        return result

    def create_snapshot_repository(
        self, service_name, repository_name="es-backup-repository", readonly=False
    ):
        """
        Create a repository in S3 to store snapshots
        """

        client = self._get_service_client(service_name)
        settings = {
            "type": "s3",
            "settings": {
                "bucket": self.bucket_credentials["bucket"],
                "region": self.bucket_credentials["region"],
                "access_key": self.bucket_credentials["access_key_id"],
                "secret_key": self.bucket_credentials["secret_access_key"],
                "readonly": readonly,
            },
        }

        result = client.snapshot.create_repository(repository_name, settings)

        return result

    def create_snapshot(
        self,
        service_name,
        repository_name="es-backup-repository",
        snapshot_name="migration_snapshot",
    ):
        """
        Create a snapshot into S3 repository
        """

        client = self._get_service_client(service_name)
        result = client.snapshot.create(repository_name, snapshot_name)

        return result

    def delete_snapshot_repository(
        self, service_name, repository_name="es-backup-repository"
    ):
        """
        Delete a created repository for snapshots
        """
        client = self._get_service_client(service_name)

        result = client.snapshot.delete_repository(repository_name)

        return results

    def restore_snapshot(
        self,
        service_name,
        repository_name="es-backup-repository",
        snapshot_name="migration_snapshot",
    ):
        """
        Restor a snapshot from an S3 repository
        """

        client = self._get_service_client(service_name)
        result = client.snapshot.restore(repository_name, snapshot_name)

        return result


if __name__ == "__main__":
    args = parser.parse_args()

    if args.command == "migrate":
        try:
            es_service = ESClient(
                args.src_service, args.dest_service, args.s3_bucket_service
            )

            ## Load sample data
            src_index_results = es_service.src_client.index(**sample_data_options)

            ## Create repositories for snapshots
            src_repo = es_service.create_snapshot_repository(args.src_service)
            #### Set the snapshot repository to "readonly" for the new service
            dest_repo = es_service.create_snapshot_repository(
                args.dest_service, readonly=True
            )

            ## Create snapshot of legacy service
            src_snapshot = es_service.create_snapshot(args.src_service)

            ## Restore legacy snapsot into new service
            restore_result = es_service.restore_snapshot(args.dest_service)

        except Exception as err:
            print("An error occurred while running the migrate command.")
            sys.exit(err)
